<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="generator" content="pandoc">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">
  <title></title>
  <style type="text/css">code{white-space: pre;}</style>
  <link rel="stylesheet" href="jd.css">
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"></script>
  <![endif]-->
</head>
<body>
<p><div id="nav"><a href="Index.htm">Jd</a>&nbsp;|&nbsp;<a href="Overview.htm">Overview</a>&nbsp;|&nbsp;<a href="General.htm">General</a>&nbsp;|&nbsp;<a href="Ops.htm">Ops</a>&nbsp;|&nbsp;<a href="Admin.htm">Admin</a>&nbsp;|&nbsp;<a href="Replicate.htm">Replicate</a>&nbsp;|&nbsp;<a href="Guide.htm">Guide</a>&nbsp;|&nbsp;<a href="Technical.htm">Technical</a>&nbsp;|&nbsp;<a href="Release.htm">Release</a>&nbsp;|&nbsp;<a href="License.htm">License</a>&nbsp;|&nbsp;<a href="Support.htm">Support</a></div></p>
<h2 id="key">key</h2>
<p>key [/in] table <a href="#pairs" title="wikilink">pairs</a></p>
<p>return rows in table for <a href="#pairs" title="wikilink">pairs</a>.</p>
<p>/in elided returns first row in table that matches each data row and _1 if no match</p>
<p>/in returns all rows (sorted and no _1) in table that match any data row</p>
<p>col types int1/int2/int4/float/varbyte not allowed</p>
<p>see <a href="Ops_common.htm#key" title="wikilink">key</a></p>
<h2 id="read">read</h2>
<p>Same as reads with /lr option</p>
<h2 id="reads">reads</h2>
<p>reads [options]   [ <a href="#select" title="wikilink">SELECT</a> ]   from <a href="#from" title="wikilink">FROM</a>  [where <a href="#where" title="wikilink">WHERE</a> ] [order by <a href="#order-by" title="wikilink">ORDER BY</a>]<br />
/lr - labeled rows instead of labeled cols</p>
<p><code>/e  - edate... cols as epochdt rather than iso 8601</code></p>
<p><code>/types - type added to col name - cola(edate)</code></p>
<p><code>/table foo - result used to create table foo</code></p>
<p><a href="#parsing" title="wikilink">parsing</a> read ops can be complicated</p>
<p>returns select col(s) from table(s) with rows that satisfy where</p>
<p>alias:col<br />
alias:table<br />
aggregation [by key1[,key2]]</p>
<p><code>MAXROWCOUNT_jd_      NB. current limit on result rows</code><br />
<code>MAXROWCOUNT_jd_=: 10 NB. set limit to 10</code></p>
<p>For ideas on working with reads results, see essay <a href="http://code.jsoftware.com/wiki/Essays/Inverted_Table">Inverted Table</a>.</p>
<h2 id="parsing">parsing</h2>
<p>Parsing read ops can be complicated. There are known issues that can cause problems. Keep things simple to avoid unknown problems.</p>
<p>Clauses where, order by, jdset, jdtc are stripped from the end and must appear, if present, in that order.</p>
<p>Use blanks before and after keywords.</p>
<p>Anything can appear in WHERE between quotes (<code>&quot;s</code>). This is handled and will not cause parse errors.</p>
<p>Anything can appear in col/table alias. <code>/</code> at start of SELECT will be treated as an option. Keywords (e.g. order by) in alias can cause problems.</p>
<p>Col alias can include blanks, RESERVEDCHARS, and RESERVEDWORDS and this is useful as they are result col labels.</p>
<p>Table alias can include blanks, RESERVEDCHARS, and RESERVEDWORDS but this is not useful and can cause parse problems.</p>
<p>Some problems are avoided as:</p>
<pre><code>RESERVEDWORDS_jd_ are not allowed as col/table names
RESERVEDCHARS_jd_ are not allowed in col/table names</code></pre>
<h2 id="select">SELECT</h2>
<p>read SELECT from ...</p>
<p>Select determines which columns are in the result:</p>
<pre><code> cola
 alias:cola
 cola,colb
 *
 tabf.cola,tabg.colc
 *.*
  sum cola
 sum cola,avg colb
 sum cola by key1
 sum cola by key1,key2</code></pre>
<pre><code>   jd&#39;info agg&#39; NB. aggregation functions</code></pre>
<pre><code>Select: Column(, Column)*
      | AggCol(, AggCol)*
      | AggCol(, AggCol)* by Column(, Column)*
Column: [alias:] [Tab.]Col
AggCol: [alias:] agg [Tab.]Col
Tab: table  | &quot;*&quot;
Col: column | &quot;*&quot;</code></pre>
<p>Tab is name of a table in the from clause<br />
(alias, name, or the column used to reference it)<br />
root table is used if there is no TAB</p>
<p>Col is name of a column in the corresponding table</p>
<p>alias is a name</p>
<p>agg is an aggregation function</p>
<p>if not an aggregation then * can be used for Tab and Col<br />
if Tab is *, then that column will be shown for all tables<br />
if Col is *, then all columns from the table will be used<br />
Tab expanded first so *.* gives all columns from all tables<br />
If no Columns are given, then *.* is used, or * if only one table</p>
<p>result name for a col is its alias, or how it was identified</p>
<p>by keyword groups rows by the key columns that follow it<br />
each aggregator is called on the rows of its column in each group</p>
<p>result col label does not include agg, so an alias is desirable</p>
<h2 id="from">FROM</h2>
<p>A.B indicates A is joined to B by the A ref col that refers to B</p>
<pre><code>read ... from FROM ...
read ... from A , A.B ...
read ... from A,A.jdref_id_B_id ... NB. distinguish multiple refs
read ... from A , A.B , A.C ...
read ... from A , A.B , B.D ...
read ... from A.B , A ...           NB. order does not matter
read ... from X:A , X.B , X.C ...   NB. X alias used in all subsequent uses</code></pre>
<p><code>A.B is left1 join</code><br />
<code> each A row with 1 matching B row or FILLS</code><br />
<code> if multiple matching B rows, the first one is used</code><br />
<code> not a standard join, but is fast and adequate in many cases</code><br />
<code> same as inner join if 1 and only 1 B row matches</code></p>
<p><code>A&gt;B is left join</code><br />
<code> same as outer except B rows that did not match are excluded</code><br />
<code> same as left1 except all B rows that match are included</code></p>
<p><code>A-B is inner join</code><br />
<code> same as left except rows with FILLS are excluded</code><br />
<code> same as outer except rows with FILLS are excluded</code></p>
<p><code>A=B is outer join - this join is not implemented</code><br />
<code>  all possible rows</code><br />
<code>  A rows duplicated for each match in B</code><br />
<code>  B rows duplicated for each match in A</code><br />
<code>  A or B FILLS provided where no match</code></p>
<p><code>A</code><B is right join - this join is not implemented
   same as outer except A rows that did not match are excluded 

Joins are done in an order based on a sampling that picks representative rows
and tests how restrictive the queries are.

See tutorials from and join

== WHERE ==

read ... from ... where WHERE

<pre><br />
<code>a=</code>“<code>abc</code>”<br />
<code>b&lt;23</code><br />
<code>b in (23,24,25)</code><br />
<code>b lt 23 &amp;&amp; a eq </code>“<code>abc</code>”<br />
<code>a like </code>“<code>ab*</code>”<code> </code><br />
<code>f.a=23 &amp;&amp; g.b=</code>“<code>def</code>”<br />
<code>a range (1000,2000)</code><br />
<code>a=1 and b=2</code><br />
<code>a,b = 1,2          - same as above but uses a,b hash if available</code><br />
<code>(a=1 and b=2) or (a=3 and b=4)</code><br />
<code>a,b in (1,2),(3,4) - same as above but uses a,b hash if available</code></p>
</pre>
<p>relationals:</p>
<pre><code> &gt;= &lt;= &lt;&gt; =  &gt;  &lt;
 ge le ne eq gt lt range
 in notin like likeci unlike unlikeci sample sample.</code></pre>
<pre><code> sample n returns n random rows
 sample. users ?. instead of ?

 non-symbol must be blank delimited

 byte data must be in &quot;s and has C escapes (\&quot; \t \n \0 \x09 ...)
 numeric data must not be in &quot;s

 like/likeci/unlike/unlikeci (ci - case insensitive) regex applies to all types

 relationals have implied parens (which must not be present)
 
 a=c (c not a number and not in &quot;s) is a relation between 2 cols

 t (no col/relational) selects rows from table t not created by join</code></pre>
<p>logicals:</p>
<pre><code> !   &amp;&amp;  ||
 not and or</code></pre>
<ul>
<li>must be blank delimited</li>
</ul>
<ul>
<li>logicals evaluate as J (right to left):</li>
</ul>
<pre><code>  not a=23 &amp;&amp; b=24 || b=25  ===  not((a=23)&amp;&amp;((b=24)||(b=25)))</code></pre>
<p>parens can change the order of evaluation</p>
<p>details:</p>
<pre><code>W:  (&quot;!&quot; | &quot;not &quot;)* W1
W1: W2 (&quot; &quot; (&quot;and&quot;|&quot;or&quot;|&quot;&amp;&amp;&quot;|&quot;||&quot;) &quot; &quot; W)?
W2: &quot;(&quot; W &quot;)&quot;  |  Q
Q:  col relational dat  |  col relational col  |  tab</code></pre>
<p>col is col name as in select and tab is table name</p>
<p>Q expressions are in implicit parens, which must not be present.</p>
<p>dat represents a J noun; typically this must have the same type as the items of the column, but its type depends on the operation being used. If dat is a string or byte, it must be quoted; otherwise it will be interpreted as numeric data, a column name, or an error.</p>
<p>Strings are in “s and C escapes (\”, \n, etc.) can be used.</p>
<p>Logicals (! $$ || not and or) are grouped from right to left as in J, with parentheses allowed for grouping.</p>
<p>The three types of simple query:<br />
- For an operation on a col and data, the data is fixed so that it has the appropriate type and shape. For most operations, this is the same type and shape as an item in the column. For in and notin, its items will have that type and shape. For sample and sample., it will be converted to a single number. See the section on data conversion below. After conversion, the operation will be applied to select qualifying rows in the column.<br />
- For an operation on two columns, the operation will be applied to pairs of rows from the two columns to select qualifying rows. The operations in, notin, like, unlike, sample, and sample. are not available on columns.<br />
- The single table query selects rows that are not null. Null rows are created by some joins and do not correspond to a row in the table. They are indicated with fills.</p>
<p>The relationals:<br />
- (&gt;= &lt;= &gt; &lt; range) are for numeric cols<br />
- range arg is list of numbers, which is split into pairs if an odd number, the last range extends to _ matches are in the range(s) (inclusive)<br />
- in and notin test whether col value is an element of the list<br />
- like and unlike take a regex and test if the col data matches<br />
- sample and sample. require a data argument that is a single number</p>
<p>Data can be converted either to string (or byte) or numbers.<br />
Numbers must include only the characters -_. and digits.<br />
Strings must be quoted to avoid confusion with keywords and col names.</p>
<p>Following escapes are allowed in quoted strings:</p>
<pre><code>\&quot;     double quote
\\     backslash
\a     alert (BEL)
\b     backspace
\e     escape
\f     form feed
\n     new line
\r     carriage return
\t     horizontal tab
\v     vertical tab
\xHH   byte with hexadecimal value HH</code></pre>
<p>Following escapes may be supported but their use is discouraged:</p>
<pre><code>\NNN        byte with octal value NNN (1 to 3 digits)
\xHH        byte with hexadecimal value HH (1 to 2 digits)
\uHHHH      Unicode  (ISO/IEC  10646)  character with hex value HHHH (4 digits)
\UHHHHHHHH  Unicode character with hex value HHHHHHHH (8 digits)</code></pre>
<p>Data is adjusted to the shape of the column. A list of data can be provided by separating items with spaces (this works with numbers or strings). If the data is smaller than the column shape, it will be filled with the fill element corresponding to the column type. If it is larger, an error is signalled.</p>
<p>For in and notin, data is given in a comma-separated list, optionally enclosed by parens.</p>
<p>In Q expression of the form “col = dat” or “col in dat”, col can be a comma-separated list of cols. In this case each item in dat is a comma-separated list with the same length as the number of cols. If the relational is “in”, each item in dat must be parenthesized. The col values are compared with the items in dat. If there is a hash columns it will be used for the query.</p>
<h2 id="order-by">ORDER BY</h2>
<p>One or more cols separated by commas used to sort the final result. Ascending by default. Add desc at end for descending.</p>
</body>
</html>
