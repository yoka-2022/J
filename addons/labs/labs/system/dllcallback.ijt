NB. Lab: Shared Library (b) (dll/so/dylib) - callback

0 : 0
this lab assumes you are already familiar calling DLLS
if not, see lab: Shared Library - intro
)

0 : 0
A dll can callback to the caller

  J calls dll       ->
                        dll runs
                    <-  dll callback to J
  J callback runs
  verb cdcallback
  J returns         ->
                        dll runs
                    <-  dll returns to J
  J runs
)

0 : 0
dll routine callback calls compiled C code in JE
the compiled JE code calls the J verb cdballback
with y parameter that is list of integers parameters

although there are many different types of callback parameters
they are all passed at the lowest level as integers
bit, byte, char, wide char, short integer, integer, and float
are all passed as 64 bit values
everything else is passed as a pointer and can be treated as 64 bit
doesn't matter what they are, just just how many of them there are

different compiled C code in JE handles differing number of parameters 
)

0 : 0
qsort C library routine calls a callback to compare 2 elements from a list

msdn qsort declaration is:
void qsort(void *base,size_t number,size_t width,
 int (__cdecl *compare )(const void *, const void *)

unix declaration is similar

base    - address of the list to be sorted
number  - number of items in the list
width   - width in bytes of an item
compare - address of callback to do the comparison
)

assert IF64 NB. requires J64

[libc=: ' ',~>(-.UNAME-:'Win'){'msvcrt';unxlib'c'

qsort=: (libc,'qsort n * x x x')&cd

cb2=. cdcb 2 NB. get address of callback code with 2 parameters

NB. the callback calls J verb cdcallback with 2 integer parameters
NB. the parameters are pointers to items in the list to be sorted
NB. return integer scalar from the comparison
cdcallback=: 3 : 0
'a b'=: y
a=. memr a,0,1,JINT NB. get integer at address
b=. memr b,0,1,JINT
r=. ''$a-b          NB. return scalar integer
)

quicksort=: 3 : 0
>1{qsort y;(#y);8;cb2
)

quicksort 10?10
