LABTITLE=: 'Scientific Units'
LABDEPENDS=: 'math/uu'

0 :0
Friday 7 June 2019  13:03:59
-
done to…
NB. ========…
NB. ========…
-
open'~Desktop/UU-runlab.txt'  NB. for rewriting notes
)

NB. =========================================================
Lab Chapter Using the verb: uu
NB. =========================================================
Lab Section INTRO
Addon: math/uu (known as UU, or the UU engine)
converts quantities between different units of measurement.

UU is based on the International System of Units
"Le Système International d'Unités" or "SI".
   http://en.wikipedia.org/wiki/SI_units
   https://www.bipm.org/utils/common/pdf/si_summary_en.pdf

But UU knows Imperial units too,
plus some informal units journalists love to use ...
)

cocurrent 'base'

require 'math/uu'

uu '1 g'         NB. in SI the base unit is [kg] not [g]
uu '3 ft'        NB. Imperial foot: 1 yd = 3 ft
uu '1 yd'        NB. Imperial yard: approximately a metre
uu '1 kWh'       NB. domestic unit of electrical energy
uu '1 W s'       NB. the "coherent" SI unit of energy
uu '1 elephant'  NB. the "typical" African elephant
uu '1 soccer'    NB. area of "typical" soccer pitch

NB. =========================================================
Lab Section CONVERT
If you call uu with right argument only,
uu converts to the base units of SI:
   metre [m], kilogram [kg], second [s], Ampere [A],
   Kelvin [K], candela [cd], mole [mol].

But if you specify target units in the left argument,
uu instead converts to the target units ...
)

'ft' uu '1 yd'
'yd' uu '6 ft'
'J'  uu '1 kWh'

NB. =========================================================
Lab Section COMPATIBLE1
...But of course only if the units are compatible.

If they are not, uu returns a value of zero 
(meaning: there are no feet in a kilowatt-hour.)
...
)

'ft'  uu '1 kWh'

NB. =========================================================
Lab Section COMPATIBLE2
NOTE the behavior of uu with unknown units...
)

'gizmo' uu '1 yd'
uu '1 gizmo'

NB. =========================================================
Lab Section SLASH1
'/' is the UU convention for DIMENSIONLESS UNITS.

	>>>>> also mention [*]

This prevents the units string vanishing when you divide
compatible units by each other.)

Dimensionless units are mostly ratios:
   sin, cos, specific gravities, %, etc.
)

uu '1 km/mi'		NB. conversion factor: km --> miles
'%' uu '1 km/mi'	NB. ditto, as a percentage

NB. =========================================================
Lab Section SLASH2
To "divide" two arbitrary units strings, use: udiv

(Don't just put '/' between them, unless you know for certain
that the denominator doesn't contain slash).

Then use: uu -to cancel-out...
)

udiv=: udiv_uu_

u1=: 'kg m^2/A^2/s^3'		NB. energy
u2=: 'kg m^2/A^2/s^2'		NB. power

u1 udiv u2
uu  '123 ', u1 udiv u2

NB. =========================================================
NB. =========================================================
Lab Section SI_LOOK1
uu approximates the "SI look-and-feel" with unicode chars
(in utf-8 encoding, the standard for the J session).

To suppress this behavior, enter: state_uu_ 0


	>>> no uunicode any more
		but we now have: state


If you enter: state_uu_ 1
then uu will output utf-8 chars.
(It always accepts them as input.)
)

state_uu_ 1
'Ohm' uu '1 kg m^2/A^2/s^3'
      uu '1 kg m^2/A^2/s^3'

state_uu_ 0
'Ohm' uu '1 kg m^2/A^2/s^3'
      uu '1 kg m^2/A^2/s^3'

state_uu_ 1	NB. reset to the default

NB. =========================================================
Lab Section SI_LOOK2
Strict SI units do not use '/' to represent units quotients.

	>>>> not strictly true.


Thus uu accepts [m/s/s] and [m/s^2] (units of acceleration)
whereas SI insists on the format [m s⁻²].

You can force UU to output units in the strict SI convention
by setting: uunicode 2
)

state_uu_ 0
   uu '1 J'

state_uu_ 2
   uu '1 J'

state_uu_ 1	NB. reset to the default


NB. =========================================================
Lab Section ZEPTO1
"SI" allows you to attach a scaling prefix to units.

Most people know about kilo [k-], mega [M-], milli [m-]
and micro [mu-] or [µ]. But there are others.
The full range is:

 	deca- 	hecto- 	kilo- 	mega- 	giga-
 	da 	h 	k 	M 	G
 	10^1 	10^2 	10^3 	10^6 	10^9
	--------------------------------------
 	tera- 	peta- 	exa- 	zetta- 	yotta-
 	T 	P 	E 	Z 	Y
 	10^12 	10^15 	10^18 	10^21 	10^24
	--------------------------------------
 	deci- 	centi- 	milli- 	micro- 	nano-
 	d 	c 	m 	µ [mu]	n
 	10^−1 	10^−2 	10^−3 	10^−6 	10^−9
	--------------------------------------
 	pico- 	femto- 	atto- 	zepto- 	yocto-
 	p 	f 	a 	z 	y
 	10^−12 	10^−15 	10^−18 	10^−21 	10^−24
)

uu '1 GW'          NB. one gigawatt
uu '1e21 zg'       NB. one gram, SI-style
uu '1 g'           NB. -for comparison.
   NB. …in SI units, [kg] not [g] is the basic unit of mass.

NB. =========================================================
Lab Section ZEPTO2
The term "micron" and the symbol µ, representing the
micrometre, were officially accepted between 1879 and 1967,
but officially revoked by the ISI in 1967.
   http://en.wikipedia.org/wiki/Micron

However UU accepts [µ] by itself to mean "micron".

WARNING: not every unicode variant of µ will work!

Use either 'u' or 'µ' for entering microns [µm]...
)

uu '1000 um'       NB. 1000 micron (micrometre)
uu '1000 µm'
uu '1000 µ'
'mm' uu '1000 µ'   NB. 1000 micron = 1 mm

'Ang' uu '1 µm'    NB. micron --> Ångstrom units
'Å' uu '1 µ'
'µ' uu '1 Å'

NB. =========================================================
Lab Section ZEPTO3
uu accepts SI scaling prefixes on non-SI units too.

Why? Because it's too much trouble to forbid them.
)

cocurrent 'base'

uu '1 zft'	NB. zepto-feet -need very small shoes.
   NB. Earth mass, in zetta-elephants...
'Zelephant' uu '1 ea.mass'
   NB. Earth mass, in yotta-elephants...
'Yelephant' uu '1 ea.mass'
   NB. Try again, with greater precision...
SCI_uu_=: 0	NB. force scientific numerals above 1
SIG_uu_=: 5	NB. decimal places to show
'Yelephant' uu '1 ea.mass'
   NB. Restore recommended settings...
factory_uu_''

NB. =========================================================
Lab Section MISC
Miscellaneous conversions

Would you have guessed? ...
)

   NB. A yottagram -in Imperial tons. A heavy unit!! ...
'ton' uu '1 Yg'
   NB. ditto, in tonnes (metric tons)...
't' uu '1000 Zg'
   NB. Weight of the Space shuttle in African elephants...
'elephant' uu '2030 t'
   NB. Mass of the moon in terms of earth...
'ea.mass' uu '1 moon.mass'
   NB. Moon gravity, in earth gravity units...
'earth.g' uu '1 moon.g'

NB. =========================================================
Lab Chapter Defining new units
NB. =========================================================
Lab Section INTRO
You can define your own units by editing the table of
UU constants: uuc.ijs

We shall open uuc to examine it ...
)

   open '~addons/math/uu/uuc.ijs'


NB. =========================================================
Lab Chapter Using the keyhole interface: uuengine
NB. =========================================================
Lab Section INTRO
Verb: uuengine is an all-purpose portal into the UU package.

Its "instructions" are all strings (ascii or utf-8).

The first 4 letters are the instruction code.

uuengine can return:
 • scalar Boolean or integer numbers
 • strings which are units
 • boxed lists

If the returned string is not a valid quantity
(a number followed by units, in the form of a single string)
then it is an error message
(which always begin with '>>>')

We saw an error message earlier:
 >>> uu: incompatible units: x=[ft] targ=[ft] unit=[kWh]

Here is the same uuengine instruction called directly,
and also (for comparison) via uu
)

uuengine_uu_ 'CPAT J > erg'
uu'*CPAT J > erg'
uu'*CPAT J'  NB. WRONG - CPAT needs 2 units separated by '>'

NB. =========================================================
Lab Chapter Using math/uu as a class
NB. =========================================================
Lab Section INTRO
Addon: math/uu can be used as a class.

This lets you run multiple instances of the UU engine
each with its own separate state.
)
