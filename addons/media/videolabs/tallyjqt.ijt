NB. Lab: Video - The Tally Monadic Verb - #y 
NB. 
NB.labchapter:Video Requirements

0 : 0
_______________________________________

To run this video lab, you must have 
access to youtube.com through the 
internet. 

If you do not, the lab will still 
advance through the exercises, but the 
videos will not be displayed.

Videos will appear as steps in the lab,
but you will need to click play on the video 
to get it started.

When you have viewed a video, click back on
the terminal window to continue the lab.

This is required because when you are 
interacting with a video, you are not 
actually interacting with the J lab.
_______________________________________
)

NB.labchapter:Action of # on Non-Empty arrays

NB.labprepare:
require jpath '~addons/media/videolabs/videolabjqt.ijs'
init_qtvideo_ ''  NB. initialize according to screensize
display_qtvideo_ 's4Y5fHof6Ss'
NB.labprepare:

0 : 0
_______________________________________

Now, a chance to play with some of these
concepts and see if the results of these
examples meet your expectations.
_______________________________________
)

[ A233 =. i. 2 3 3

$ A233  NB. Shape of A233 is 2 3 3 - a list of length 3

NB. Can you predict the result of # A233 

# A233  NB. 2 items (first entry in "Shape of")


0 : 0
_______________________________________

The rule of thumb here is that the 
number of items is the first entry of
the Shape list.

In this case, the first entry is 2.

Now, let's try another one.
_______________________________________
)

[ A4 =. i. 4

$ A4   NB. Shape of A4 is 4 - a list of length 1

NB. Can you predict the result of # A4 

# A4   NB. 4 items (first entry in "Shape of")


0 : 0
_______________________________________

What if we had a list of length 1?
_______________________________________
)

[ A1 =. ,4

$ A1 NB. Shape of A1 is 1 - a list of length 1

NB. Can you predict the result of # A1?

# A1   NB. 1 item (first entry in "Shape of")


0 : 0
_______________________________________

What about atoms?
_______________________________________
)

[ A =. 4

$ A   NB. Shape is empty.

NB. Can you predict the result of # A?

# A1   NB. 1 item - the atom itself


0 : 0
_______________________________________

Atoms have one item and that item is 
the atom itself. 

Play around a bit more until you are
comfortable with these results or
any others that you might invent. You are
working in a fully functioning J
environment.

When you are satisfied, advance the 
lab and get ready for the next video 
which covers the case of empty shapes.
_______________________________________
)

NB.labchapter:Action of # on Empty arrays

NB.labprepare:
display_qtvideo_ 'mzzVHQyVeB8'
NB.labprepare:

0 : 0
_______________________________________

Now, let's look at a number of
different empty arrays. I'll define
a few for your benefit.
_______________________________________
)

[ A03 =. 0 3 $ 4

$ A03   NB. Shape is 0 3.

# A03  NB. 0 items - 0 is the first integer of the shape

[ A30 =. 3 0 $ 4  NB. 3 empty rows!

$ A30  NB. Shape is 3 0 as expected

# A30 NB. 3 items - 3 is the first integer of the shape


0 : 0
_______________________________________

You can see that some empty arrays
are empty because they have no items 
and some empty arrays are empty because
the items that they have are empty. 
_______________________________________
)

NB.labchapter:Action of # (Tally) compared to $ (Shape Of)

NB.labprepare:
display_qtvideo_ 'nAcuL9KWOPI'
NB.labprepare:

0 : 0
_______________________________________

Now, let's look at the relationship of
the shape, the number of items and the
rank of the argument, using the "Tally"
and "Shape Of" monadic verbs
_______________________________________
)

[ A233 =. i. 2 3 3  NB. we have used this one before

$ A233  NB. Shape of A233 is 2 3 3

# A233  NB. 2 items (first entry in Shape of)

#$ A233 NB. Rank 3 - the number of items in the "Shape Of"

0 : 0
_______________________________________

We could use $$y instead of #$y to 
give us the rank, but the result of
$$y would be a list and usually you would
expect the rank to be an atom.
_______________________________________
)

# $ A233  
$ $ A233

$ #$ A233  NB. Shape of items in the shape is an atom
$ $$ A233  NB. Shape of shape of the shape is a list

NB. Let's look at another array

[ A1 =. ,4  NB. we have used this one before, as well

$ A1  NB. Shape of A1 is 1

# A1  NB. 1 item (first entry in "Shape of")

#$ A1 NB. Rank 1 - the number of items in the "Shape Of"

0 : 0
_______________________________________

When we look at the case of atoms
we see that we have an empty shape,
which would be rank 0.
_______________________________________
)

[ A =. 4  NB. we have also used this variable before

$ A  NB. Shape of A is the empty list

#$ A NB. Rank 0 - the number of items in the "Shape Of"

0 : 0
_______________________________________

How does this help to understand why the
number of items of an atom is 1?
_______________________________________
)

# A  NB. 1 item (the atom itself)

0 : 0
_______________________________________

What would the other options be?
An atom can't have 0 items because
that would make it an empty array. We
know empty arrays are not atoms because
atoms have something in them. 

It is also pretty clear that the number of items
in an atom could not be more than one or
negative, so we are left with an atom having
one item - itself. 

So if it has a rank of 0, it has a shape that is 
empty, which makes it an atom and
an atom has one item - itself 
___________________________________
)

#$ A  NB. Rank 0
$ A   NB. Shape empty
# A   NB. 1 item

NB.Here the lessons end, but following 
NB.is a list of references where you
NB.can find out more about what
NB.you have seen and the J parts of speech
NB.that have been used in this explanation.

NB.labchapter:References

0 : 0
_______________________________________

 Nuvoc Definition for 'Tally' Monadic Verb found at https://code.jsoftware.com/wiki/Vocabulary/number 
 J for C Programmers - Chapter 8 - More Verbs - 'Tally' Monadic Verb found in Monad # (Tally) section at https://www.jsoftware.com/help/jforc/declarations.htm#_Toc191734329
 The J Dictionary Vocabulary Definition for 'Tally' Monadic Verb found at https://www.jsoftware.com/help/dictionary/d400.htm

 Nuvoc Definition for 'Shape Of' Monadic Verb found at https://code.jsoftware.com/wiki/Vocabulary/dollar 
 J for C Programmers - Chapter 5 - Declarations - 'Shape Of' Monadic Verb found at https://www.jsoftware.com/help/jforc/declarations.htm#_Toc191734328
 The J Dictionary Vocabulary Definition for 'Shape Of' Monadic Verb found at https://www.jsoftware.com/help/dictionary/d210.htm
 _______________________________________
)

0 : 0
_______________________________________

If you would like to review any of the
previous chapters, advance the lab then 
select the chapter you wish to review
from the pop up message box.
_______________________________________
)

lab ':'
