LABTITLE=: 'Tara and Excel'
LABCOMMENTS=: 'bill lam'
LABDEPENDS=: 'tables/tara'

NB. =========================================================
Lab Chapter Introduction
NB. =========================================================
Lab Section Introduction
Tara reads and writes files in Excel format. It supports the biff8 format used in Excel 97/2000/XP/2003, as well as formats used in earlier versions of Excel. It runs on Windows, Linux and Mac OSX. MS Excel or OpenOffice is not required to use Tara.

Compared with the OLE/COM interface, Tara is faster and is platform independent.  Tara has a restriction, because it writes cells in a one-pass manner, in that you cannot change the cell format.
)

NB. =========================================================
Lab Section Installation
As of J6.02 you can download the Tara addon from JAL using the Package Manager.

For earlier versions of J:
  * download the addon for your platform from     http://www.jsoftware.com/jal/. 
  * Unzip it in the J addons directory.

Where is your addons directory? It can be found by using jpath. The file tara.ijs will be found there after a successful installation.
)
jpath '~addons/tables/tara/tara.ijs'

NB. =========================================================
Lab Section Location of temp directory
All Excel files created in this lab will be saved to the temp directory. Use file explorer to open this directory, so that any Excel files can be viewed easily.

Excel files can be viewed using MS Excel, OpenOffice or Gnumeric.
)
jpath '~temp'

NB. =========================================================
Lab Section Deployment
Only the script tara.ijs is needed.  Include it in your project file.
)

NB. =========================================================
Lab Chapter Reading Excel Files
NB. =========================================================
Lab Section Load Tara package
First load tara.ijs
)
load '~addons/tables/tara/tara.ijs'

NB. =========================================================
Lab Section Classes in Tara
The Tara package contains many classes.  In this lab, we will use the terms 'class', 'object', 'locale' loosely to mean more or less the same thing.

Classes beginning with 'biff' are for biff8, while any beginning with 'ole' for ole2 storage.  But you may ignore most of them.
)
'bo' 18!:1 [0            NB. display classes in Tara

NB. =========================================================
Lab Section Available verbs
Tara provides verbs in the z locale for reading Excel files. They are:

  readexcel, readexcelstring and dumpexcel 
    - all read contents of single worksheet

  readxlsheets, readxlsheetsstring, readxlworkbooks
    - all read name and content pairs of one or more sheets

  readxlsheetnames
    - reads all sheet names in a workbook
)

NB. =========================================================
Lab Section readexcel
readexcel (and its alias readxl) reads the contents of a sheet as a boxed matrix.

  left argument is worksheet index or name (0 if elided)
  right argument is file name      (eg. 'myfile.xls')

Now read the first worksheet of the sample Excel file 'test.xls'. The result is a boxed matrix.
)
android_exec_host^:('Android'-:UNAME) 'android.intent.action.VIEW';('file://',jpath'~addons/tables/tara/test/test.xls');'application/vnd.ms-excel';0
readexcel jpath '~addons/tables/tara/test/test.xls'      NB. read first worksheet

NB. =========================================================
Lab Section readexcelstring
readexcelstring is same as readexcel except that all values will be converted to string.
)
] b=. 'Sheet1' readexcelstring jpath '~addons/tables/tara/test/test.xls'  NB. worksheet by name
3!:0&.> b

NB. =========================================================
Lab Section readxlsheets
readxlsheets reads the name and content pairs of one or more sheets as a 2-column matrix

  left argument is list of worksheet indices or names 
                   (0 if elided and all if empty)
  right argument is file name      
                   (eg. 'myfile.xls')

Now read the 1st and 3rd worksheets of the sample Excel file 'test.xls'. The result is a boxed matrix.
)
     0 2 readxlsheets jpath '~addons/tables/tara/test/test.xls'

NB. =========================================================
Lab Section readxlworkbook
readxlworkbook <file> is an alias for:
  '' readxlsheets <file>
)
readxlworkbook jpath '~addons/tables/tara/test/test.xls'

NB. =========================================================
Lab Section readxlsheetnames
If you want to return the sheet names in a workbook without the overhead of reading the sheet contents as well, you can use readxlsheetnames.

readxlsheetnames <file>
       returns a boxed list of all the sheet names in a workbook.
)
readxlsheetnames jpath '~addons/tables/tara/test/test.xls'

NB. =========================================================
Lab Section Internal Structure of Excel File
If you are curious about what is inside an Excel file, use dumpexcel. It returns 5 arrays in the base locale.

  (workbook global)
  sst        .... shared string
  bkrecords  .... biff records in workbook global,
                    each item is (type offset length)
  bkbytes    .... byte stream for bkrecords

  (worksheet)
  records    .... biff records in requested worksheet, 
                    each item is (type offset length)
  bytes      .... byte stream for records

  offset is 0-base index to (bk)bytes array.
)

NB. =========================================================
Lab Section dumpexcel 
Let's dump the first worksheet of test.xls
)
0 dumpexcel jpath '~addons/tables/tara/test/test.xls'      NB. dump first worksheet

NB. =========================================================
Lab Section
bkrecords contains an integer matrix, where the first column is the record type of biff8 records.
eg.
  first  item    2057 (16b809)   : BOF (Beginning of File)
  last-3 item     252 (16bfc)    : SST (Shared String Table)
)
bkrecords

NB. =========================================================
Lab Section
The content of records can be found in (bk)bytes array.  

  Eg. the SST record (252 1544  126)
      content is bkbytes{~1544+i.126

Please refer to "Microsoft Excel File Format" (download at http://sc.openoffice.org/excelfileformat.pdf) for details.  Warning: it is difficult to read.

This is the end of reading Excel files.
)
bkbytes{~1544+i.126      NB. content of SST record

a.i.bkbytes{~1544+i.126  NB. show unprintable data

NB. =========================================================
Lab Chapter Writing simple Excel files
NB. =========================================================
Lab Section writexlsheets - numeric arrays
Sometimes you just want to quickly write an array (or arrays) to an Excel workbook. The writexlsheets verb will help you do that. The format is:

<array> writexlsheets <file>

You can write numeric arrays that are either boxed or unboxed.
)
]x1=: i.3 5        NB. simple integer array
x1 writexlsheets jpath '~temp/tarasmp1.xls'
android_exec_host^:('Android'-:UNAME) 'android.intent.action.VIEW';('file://',jpath'~temp/tarasmp1.xls');'application/vnd.ms-excel';0
]x2=: <"0 ]3 4?.@$0  NB. boxed array of floats
x2 writexlsheets jpath '~temp/tarasmp2.xls'

NB. =========================================================
Lab Section writexlsheets - char/mixed arrays
writexlsheets can also write boxed arrays of literals(strings) and mixed type.

(An unboxed literal will be written to cell A1 of the worksheet.)
)
]x3=: 2 4$'Lorem ipsum';'dolor sit';'Hi there!' NB. boxed char array
x3 writexlsheets jpath '~temp/tarasmp3.xls'
]x4=: 4 2$'consectetur';54;'Hi there!';2;4.4 
x4 writexlsheets jpath '~temp/tarasmp4.xls'

NB. =========================================================
Lab Section writexlsheets - with sheet names
You can give a sheet name for your array using the format:

<shtnme> ;< <array> writexlsheets <file>
)
('Integer array';x1)      writexlsheets jpath '~temp/tarasmp5.xls'
('Boxed Mixed array';<x4) writexlsheets jpath '~temp/tarasmp6.xls'

NB. =========================================================
Lab Section writexlsheets - multiple sheets
You can write multiple 2D arrays to different worksheets in the same workbook without sheetnames by giving them as a boxed column of arrays:
  (,.<array1> ;< <array2>) writexlsheets <file>
)
]x5=: ,.x1;x2;<x4
x5 writexlsheets jpath '~temp/tarasmp7.xls'

NB. =========================================================
Lab Section
You can give the sheets names by prepending a second column to the left argument.
  ((<name1> ;< <array1),(<name2> ;< <array2)) writexlsheets <file>
)
]x6=: ('Numeric array';'';'Boxed Mixed array'),.x5
x6 writexlsheets jpath '~temp/tarasmp8.xls'

NB. =========================================================
Lab Section writexlsheets - return contents
You can return the content of the generated Excel file, instead of writing to a file.  This is useful for a J web server that provides a dynamically created Excel file to browsers.

To do so, use '' as the file name during saving.
)
 xlfile=: ('Integer array';x1) writexlsheets ''
 _16]\ a.i. xlfile NB. binary contents of Excel file.

NB. =========================================================
Lab Section writexlsheets - more examples
For more examples of using writexlsheets, see the '~addons/tables/tara/test/taratest2.ijs' script.

If you want more control over the writing and formating of your workbook, see the next Chapter:
   Writing Excel files - fine control
)
open '~addons/tables/tara/test/taratest2.ijs'

NB. =========================================================
Lab Chapter Writing Excel Files - fine control
NB. =========================================================
Lab Section hello world
Tara gives you fine control over the creation and formatting of Excel files.
The basic steps for creating an Excel file are:

  1. create a workbook
  2. write contents to a cell
  3. save to a file
  4. destroy object (as a good habit)

cell may be specified by
  1. 0-based row,col array,  or
  2. "A1 mode"

The Excel file will be created and placed in temp directory.  Now use MS Excel or OpenOffice to open it yourself.
)
bi=: '' conew 'biffbook'               NB. create an workbook
writestring__bi 1 3 ; 'hello world'    NB. write text in a cell: rowcol ; text (rowcol is 0-based)
writestring__bi 'C4' ; 'hello Tara'    NB. cell in "A1" mode
save__bi jpath '~temp/tara1.xls'       NB. save to a file
destroy__bi ''                         NB. destroy workbook object, NOT the Excel file

NB. =========================================================
Lab Section Workbook and Worksheet
In the last section, you met 'biffbook' which is Tara's workbook object. Now we look at worksheet object 'biffsheet', but you typically will never need to create a 'biffsheet' object directly.

First create a workbook. Note that the left argument is mandatory even it is '', because 'create' in biffbook has to be run.
)
bi=: '' conew 'biffbook'

NB. =========================================================
Lab Section Property/Method
One worksheet has also been created automatically.  The question is how to access this worksheet?

First we summarise some properties/methods in the workbook and worksheet objects.

  workbook (class 'biffbook')
  ===========================
  property
  --------
  sheet            ... array of workbook object

  method
  ------
  conew            ... create workbook
  destroy          ... destroy workbook

  addcolinfo       ... set individual column width
  addrowinfo       ... set individual row height

  save             ... save workbook object to file
  writenumber      ... write number to cell
  writestring      ... write text to cell
  writecomment     ... write comment to cell

  worksheet (class 'biffsheet')
  =============================
  property
  --------
  defaultcolwidth  ... default column width
  defaultrowheight ... default row height
)

NB. =========================================================
Lab Section Row Height and Column Width
Property 'sheet' of workbook is an array of worksheet objects, so 

  l=: 0{sheet 

is the worksheet object we want. We can now set various properties of the worksheet.
)
l=: 0{sheet__bi              NB. worksheet object
defaultcolwidth__l=: 5       NB. number of characters of first predefined font

NB. set default row height
defaultrowheight__l=: 400    NB. twip

NB. set individual column width
NB. y is firstcol lastcol width(in 1/256 character)
addcolinfo__bi 2 6, 256*10

NB. set individual row height
NB. y is rownumber firstcol lastcol+1 usedefaultheight rowheight(in twip) heightnotmatch ...
addrowinfo__bi 1 0 256 0 1000 1

NB. =========================================================
Lab Section
Fill some cells and save the file, and then open tara2.xls
)
writestring__bi 1 3 ; 'hello world'
writenumber__bi 'C3' ; o.1

save__bi jpath '~temp/tara2.xls'
destroy__bi ''

NB. =========================================================
Lab Section Default Font
The default font for a Tara workbook is "courier new" 10 point. The easiest way to change this default value is to specify your preferred font when creating a new workbook. Note that the font size uses twips, which is 1/1440 inch or 1/20 point.
)
bi=: ('Arial' ; 300) conew 'biffbook'   NB. 15 point
writestring__bi 1 3 ; 'hello world'     NB. row col text
writenumber__bi 2 4 ; o.1               NB. row col number
writestring__bi 3 2 ; ":o.1             
save__bi jpath '~temp/tara3.xls'
destroy__bi ''

NB. =========================================================
Lab Section xf object
The xf object (class 'biffxf') is rather complicated, but you have to use it a lot.

When you use "format cell dialog" in MS Excel, there are several tabs of options for setting format, font, alignment, border, ...

The xf object is the equivalent of "format cell dialog", so you know why xf is useful but complicated.

Tara will create a xf object called 'cxf' (current xf) when initializing a workbook.  Using cxf, you can set various cell formats.

First create a workbook and get its cxf.  Note xf is just an alias of cxf__bi not a new object.
)
bi=: ('Courier New' ; 220) conew 'biffbook'  NB. default font
xf=: cxf__bi         NB. current workbook xf object

NB. =========================================================
Lab Section Font
Some properties of xf related to fonts:

  property for font
  -----------------
  fontname       ...  no need to use double quotes (")
  fontheight     ...  in twip
  fontweight     ...  400 normal 700 bold
  fontitalic     ...  boolean
  fontunderline  ...  boolean
  fontstrike     ...  boolean

There are other rarely used font properties too.
)
NB. font
fontname__xf=: 'Lucida Console'  NB. no need to use double quotes (")
fontheight__xf=: 300  NB. twip
fontweight__xf=: 700  NB. 400 normal, 700 bold
fontitalic__xf=: 1    NB. italic
writestring__bi 1 3 ; 'hello world'

NB. =========================================================
Lab Section Font Color
In Excel, text color is not true color (24-bit color), it must be chosen from a set of color palette. The verb 'rgbcolor' will select a nearest color from given (red,green,blue) color.

Remember the font has been set to bold,italic in the last cell, so we may have to reset it.
)
NB. font color
fontweight__xf=: 400  NB. 400 normal, 700 bold
fontitalic__xf=: 0
fontcolor__xf=: rgbcolor__bi 0 0 255  NB. blue
writestring__bi 2 4 ; 'hello color'

NB. =========================================================
Lab Section Cell Background Color
Use property 'patterncolor' to set cell background color. Write some text and save again.

You may open tara4.xls

You may also change pattern__xf to some other value to experiment.
)
NB. background color
patterncolor__xf=: rgbcolor__bi 3#16bcc  NB. gray
pattern__xf=: 1                          NB. solid background
writestring__bi 2 2 ; 'background'

save__bi jpath '~temp/tara4.xls'
destroy__bi ''

NB. =========================================================
Lab Section Number and Date Format
Property 'format' is used to format data. Examples are '#,##0,00' and '0.00'

An Excel date is a number displayed with a date format. It starts from 1-1-1900 with a well known leap year bug.

To convert from J day numbers (result of verb 'todayno' in dates.ijs), subtract 36522.

For convenience, the verb 'writedate' can also be used, it has an advantage over 'writenumber' of including the format string in its argument.

Note, once you changed any property of xf, it will be used subsequently.  If you forgot the line

  format__xf=: 'dd/mm/yyyy'

then format string '0.00' will apply to 
  writenumber__bi 4 3 ; 74699-36522

So watch out. Open tara5.xls
)
bi=: ('Courier New' ; 220) conew 'biffbook'
xf=: cxf__bi                     NB. current workbook xf object
addcolinfo__bi 2 6, 256*12

writenumber__bi 1 3 ; 1234.56
format__xf=: '#,##0,00'          NB. format string
writenumber__bi 2 3 ; 1234.56
format__xf=: '0.00'
writenumber__bi 3 3 ; 1234
NB. subtract 36522 to give Excel date, year 1900 bug ignored
format__xf=: 'dd/mm/yyyy'
writenumber__bi 4 3 ; 74699-36522
NB. another verb for date
writedate__bi 5 3 ; 74699 ; 'd/m/yy'
save__bi jpath '~temp/tara5.xls'
destroy__bi ''

NB. =========================================================
Lab Section Alignment and Cell Border
Alignment is relatively simple:

  horzalign      ... horizontal alignment,
                   0 general  1 left  2 center 3 left
  vertalgin      ... vertical alignment,
                   0 top  1 center  2 bottom
  textwrap       ... wrap text
                   boolean

'general' is align left for text and right for others.

In case you want to save the trouble of setting and resetting the xf property,  you may create another xf object using verb 'addxfobj'.  Usually you can use another existing xf object as an argument to clone a new xf object. Specify your xf object instead of the cxf in 'writestring' or other verbs.
)
bi=: ('Courier New' ; 220) conew 'biffbook'
xf=: cxf__bi            NB. current workbook xf object
xf1=: addxfobj__bi xf   NB. clone xf for later use

addcolinfo__bi 0 3, 256*12

horzalign__xf=: 1       NB. 0 general  1 left  2 center 3 left
writestring__bi 0 1 ; 'hello world'
horzalign__xf=: 2
writestring__bi 1 1 ; 'center'
horzalign__xf=: 3
writestring__bi 2 1 ; 'right'
xf1 writestring__bi 2 3 ; 'xf1'   NB. xf1 object as left argument

NB. =========================================================
Lab Section Merged Cells
Cells can be merged together. Write data to the first cell (upper left). Each worksheet keeps an array of merged cells, with structure:

 row1 row2 col1 col2

We do not need to set this array right now, it can be set after writing the cells.
)

fontheight__xf=: 300  NB. twip
horzalign__xf=: 2
vertalign__xf=: 1  NB. 0 top  1 center  2 bottom
writestring__bi 3 2 ; 'merge 1'
vertalign__xf=: 2
writestring__bi 4 0 ; 'merge 2'

NB. =========================================================
Lab Section Cell Border
Setting cell border is troublesome.  You cannot specify a block of cells and set their top border or outline border. Instead you have to write string/number/blank to each cell individually to set the cell border and content in the same 'writestring'/'writenumber'.

  leftlinestyle    ... cell border style
  rightlinestyle
  toplinestyle
  bottomlinestyle

And remember each cell can be written once only - the result of Writing to the same cell twice is undefined and may crash MS Excel when it opens the file.
)

NB. =========================================================
Lab Section Cell Border Constants
Each cell has 4 borders left right top bottom. Each can be no line, thin, medium, double or other style.

Tara predefined these constants in locale 'biff' for you because they are hard to memorise:

  cellborder_no_line=: 0
  cellborder_thin=: 1
  cellborder_medium=: 2
  cellborder_dashed=: 3
  cellborder_dotted=: 4
  cellborder_thick=: 5
  cellborder_double=: 6
  cellborder_hair=: 7
  cellborder_medium_dashed=: 8
  cellborder_thin_dash_dotted=: 9
  cellborder_medium_dash_dotted=: 10
  cellborder_thin_dash_dot_dotted=: 11
  cellborder_medium_dash_dot_dotted=: 12
  cellborder_slanted_medium_dash_dotted=: 13

we now set mergedcall array of worksheet and save

open tara6.xls
)
fontheight__xf=: 220  NB. twip
fontcolor__xf=: rgbcolor__bi 0 0 255  NB. blue

NB. text alignment
horzalign__xf=: 0  NB. general
vertalign__xf=: 2  NB. bottom
NB. cell border
leftlinestyle__xf=: cellborder_thin_biff_
rightlinestyle__xf=: cellborder_medium_biff_
toplinestyle__xf=: cellborder_no_line_biff_
bottomlinestyle__xf=: cellborder_double_biff_
writestring__bi 6 3 ; 'box style'

l=: 0{sheet__bi           NB. worksheet object
mergedcell__l=: 2 4 $ 3 4 2 4 4 5 0 1  NB. 2 sets of merge cells, ( row1 row2 col1 col2)

save__bi jpath '~temp/tara6.xls'
destroy__bi ''

NB. =========================================================
Lab Section conew and destroy
Note that 'conew' and 'destroy' should be used for 'biffbook' only.

xf objects like cxf, xf1, and worksheet objects will be destroyed by Tara automatically.  Do not destroy them yourself.
)

NB. =========================================================
Lab Section Page Setup
page setup can be done by setting properties of worksheet.

  leftmargin       ... margin in inch
  rightmargin
  topmargin
  bottommargin

margins are in inch (not twip this time)
)
bi=: ('Courier New' ; 220) conew 'biffbook'

writestring__bi 0 1 ; 'madam'
writestring__bi 1 2 ; 'i''m'
writestring__bi 2 3 ; 'adam'

writestring__bi 7 3 ; 'please print preview me'
writestring__bi 70 3 ; 'second page'

l=: 0{sheet__bi           NB. worksheet object
leftmargin__l=: 0.67        NB. inch
rightmargin__l=: 0.6299
topmargin__l=: 1.5748
bottommargin__l=: 0.8267

NB. =========================================================
Lab Section Header and Footer
Property 'header' and 'footer' may contain both text and commands.

  command used in header and footer
  && The "&" character itself
  &L Start of the left section
  &C Start of the centred section
  &R Start of the right section
  &P Current page number
  &N Page count
  &D Current date
  &T Current time
  &A Sheet name (BIFF5-BIFF8)
  &F File name without path
  &Z File path without file name (BIFF8X)
  &G Picture (BIFF8X)
  &U Underlining on/off
  &E Double underlining on/off (BIFF5-BIFF8)
  &S Strikeout on/off
  &X Superscript on/off (BIFF5-BIFF8)
  &Y Subscript on/off (BIFF5-BIFF8)
  &"<fontname>" Set new font <fontname>
  &"<fontname>,<fontstyle>"
      Set new font with specified style <fontstyle>.
  &<fontheight>
      Set font height in points (<fontheight> is a decimal value).
)
header__l=: 'tara demo'
footer__l=: 'Page &P of &N &F &D'   NB. Page 2 of 10 filename date, other commands see section 6.51

NB. =========================================================
Lab Section Repeated Rows or Columns
Setting repeated rows for each page is supported through the verb 'rowrepeat'.

The right argument is the sheet index, starting row, ending row. The sheet index is the worksheet's index in sheet array of workbook. The starting row and ending row are often 0-base.

In the current system, the left argument should always be _1. 

Similarly for colrepeat.

Save the file and open tara7.xls
)
_1 rowrepeat__bi 0 0 2  NB. repeat sheet(0) row 0 to row 2
save__bi jpath '~temp/tara7.xls'
destroy__bi ''

NB. =========================================================
Lab Section Adding New Worksheet
Working with multiple worksheets is simple. A worksheet is created whenever a workbook is created, and it is the current worksheet.

To add a new worksheet, use 'addsheet' (a verb in biffbook). The newly added worksheet will always become the current worksheet. 

To switch to other worksheet, set 'sheeti' (a noun in biffbook) to the worksheet's index number.

You can set the name of the worksheet during 'addsheet', or modify the sheetname property of the worksheet after its creation.

Save and open tara8.xls
)
bi=: ('Courier New' ; 220 ; 'first worksheet') conew 'biffbook'  NB. name of first worksheet as the third parameter

writestring__bi 1 3 ; 'total 3 worksheets'
addsheet__bi ''
writestring__bi 1 3 ; 'sheet2'
addsheet__bi 'last sheet'                NB. name of worksheet
writestring__bi 1 3 ; 'last sheet'
NB. switch to sheet1, (sheeti is 0-based)
sheeti__bi=: 0
writestring__bi 2 3 ; 'sheet1'
save__bi jpath '~temp/tara8.xls'
destroy__bi ''

NB. =========================================================
Lab Section large workbook > 10MB size
(Please wait one or two minute because Tara is now creating an 18MB Excel file)

Tara is optimized to write numeric array and boxed character array.

'writestring' and 'writenumber' write an array as a whole. Their right argument is:

  the row and column define the upper-left corner cell.
  the second item in the argument is data, it can be
  1. scalar, rank-1 or rank-2 numeric array
  2. scalar, rank-1 or rank-2 character array
  3. A box containing rank-1 or rank-2 boxed character array

Remember the right argument always contains exactly 2 items.

Save and open tara9.xls
)
bi=: ('Courier New' ; 220) conew 'biffbook'

writenumber__bi 0 0 ; i.6000 100
writestring__bi 6000 0 ; < <"(1) 6000 100 7$'ABCDEFGHIJKLMNOPQRSTUVW'
save__bi jpath '~temp/tara9.xls'
destroy__bi ''

NB. =========================================================
Lab Section Image and Comment
Assuming you have the image file '~addon/tara/dora.png', use 'insertimage' in biffbook to insert a image into a worksheet.

syntax: bitmap insertimage rowcol ; offset_xy ; scale_xy
right argument
  rowcol    cell that we are going to insert the bitmap into
  offset_xy horizontal,vertical position (offset) of the image inside the cell.
  scale_xy  horizontal,vertical scale factor
left argument
  bitmap    Boxed image filename or unboxed raw image data

Note: insertimage supports bmp/jpeg/png format image file in MS Excel, OpenOffice and GNumeric.  However GNumeric itself does not support bmp image format.


syntax: string writecomment rowcol
right argument
  rowcol    cell that we are going to write the comment
left argument
  string    comment to be written

Note: In current implementation, the comment always has clear background and uses font Courier New (i.e. the formatting set in the initial workbook).

Save and open tara10.xls
)
bi=: ('Courier New' ; 220) conew 'biffbook'

writestring__bi 0 0 ; 'my picture'
'my comment' writecomment__bi 0 0     NB. comment (note)
(0  4 ; 0  0 ; 1  1) insertimage__bi <jpath '~addons/tables/tara/dora.png'  NB. row 0 col 4 scalex 1 scaley 1
(4  0 ; 0  0 ; 2  2) insertimage__bi 1!:1 <jpath '~addons/tables/tara/dora.png'  NB. also accepts unboxed raw data
save__bi jpath '~temp/tara10.xls'
destroy__bi ''

NB. =========================================================
Lab Section Return Excel File as Noun
You can choose to return the content of the Excel file generated, instead of writing to a file.  This is useful for a J web server that provides a dynamically created Excel file to browsers.

To do so, use '' as the file name during saving.
)
bi=: ('Courier New' ; 220) conew 'biffbook'

writestring__bi 1 3 ; 'hello world'
rc=: save__bi ''
destroy__bi ''

NB. =========================================================
Lab Section
You will see some binary data here.
  _16]\ a.i. rc
)
_16]\ a.i. rc

NB. =========================================================
Lab Section Summary
There are 3 main classes inside Tara package.

  biffbook
  biffwork
  biffxf

They have a lot of properties, some major properties/methods are:

  workbook (class 'biffbook')
  ===========================
  property
  --------
  sheet            ... array of workbook object
  sheeti           ... index of current worksheet

  method
  ------
  conew            ... create workbook
  destroy          ... destroy workbook

  addcolinfo       ... set individual column width
  addrowinfo       ... set individual row height

  save             ... save workbook object to file

  writedate        ... write date to cell
  writenumber      ... write number to cell
  writestring      ... write text to cell
  writecomment     ... write comment to cell

  rgbcolor         ... choose color

  addxfobj         ... clone xf

  colrepeat        ... repeated columns in printing
  rowrepeat        ... repeated rows in printing

  addsheet         ... add a new worksheet

  insertimage      ... insert bmp/jpeg/png image

  worksheet (class 'biffsheet')
  =============================
  property
  --------
  defaultcolwidth  ... default column width
  defaultrowheight ... default row height

  mergedcell       ... list of merged cells

  leftmargin       ... margin in inch
  rightmargin
  topmargin
  bottommargin

  header           ... worksheet header and footer
  footer               can use commands, eg. &P &N

  sheetname        ... name of worksheet

  xf (class 'biffxf')
  ===================
  property
  --------
  fontname       ...  no need to use double quotes (")
  fontheight     ...  in twip
  fontweight     ...  400 normal 700 bold
  fontitalic     ...  boolean
  fontunderline  ...  boolean
  fontstrike     ...  boolean

  fontcolor      ... text color
  patterncolor   ... background color
  pattern        ... pattern of background color

  format         ... number and date format

  horzalign      ... horizontal alignment,
                   0 general  1 left  2 center 3 left
  vertalgin      ... vertical alignment,
                   0 top  1 center  2 bottom
  textwrap       ... wrap text
                   boolean

  leftlinestyle    ... cell border style
  rightlinestyle
  toplinestyle
  bottomlinestyle
)
